package com.singleton;

/**
 * 4.枚举
 * Created by Saber on 2017/7/3.
 */
public enum Singleton5 {
    instance;
    public void whateverMethod(){}


    /**
     *
     * 上面提到的四种实现单例的方式都有共同的缺点：
         1）需要额外的工作来实现序列化，否则每次反序列化一个序列化的对象时都会创建一个新的实例。
         2）可以使用反射强行调用私有构造器（如果要避免这种情况，可以修改构造器，让它在创建第二个实例的时候抛异常）。
       而枚举类很好的解决了这两个问题，使用枚举除了线程安全和防止反射调用构造器之外，还提供了自动序列化机制，
       防止反序列化的时候创建新的对象。因此，《Effective Java》作者推荐使用的方法。不过，在实际工作中，很少看见有人这么写。
     *
     */


    /**
     *
     * 总结
        本文总结了五种Java中实现单例的方法，其中前两种都不够完美，双重校验锁和静态内部类的方式可以解决大部分问题，
        平时工作中使用的最多的也是这两种方式。枚举方式虽然很完美的解决了各种问题，但是这种写法多少让人感觉有些生疏。
        个人的建议是，在没有特殊需求的情况下，使用第三种和第四种方式实现单例模式。
     *
     *
     */
}
